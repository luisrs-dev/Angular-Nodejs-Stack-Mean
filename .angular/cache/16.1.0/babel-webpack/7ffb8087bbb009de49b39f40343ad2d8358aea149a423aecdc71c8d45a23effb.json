{"ast":null,"code":"import { Subject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nconst BACKEND_URL = environment.apiUrl + \"/posts/\";\nexport let PostsService = /*#__PURE__*/(() => {\n  class PostsService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.posts = [];\n      this.postsUpdated = new Subject();\n    }\n    getPosts(postsPerPage, currentPage) {\n      const queryParams = `?pagesize=${postsPerPage}&page=${currentPage}`;\n      this.http.get(BACKEND_URL + queryParams).pipe(map(postData => {\n        return {\n          posts: postData.posts.map(post => {\n            return {\n              title: post.title,\n              content: post.content,\n              id: post._id,\n              imagePath: post.imagePath,\n              creator: post.creator\n            };\n          }),\n          maxPosts: postData.maxPosts\n        };\n      }))\n      // La línea siguiente es el resultado de la operación map anterior\n      .subscribe(transformedPostData => {\n        console.log(transformedPostData);\n        this.posts = transformedPostData.posts;\n        this.postsUpdated.next({\n          posts: [...this.posts],\n          postCount: transformedPostData.maxPosts\n        });\n      });\n    }\n    getPostUpdateListener() {\n      return this.postsUpdated.asObservable();\n    }\n    getPost(id) {\n      // return {...this.posts.find(p => p.id === id)}\n      return this.http.get(BACKEND_URL + id);\n    }\n    addPost(title, content, image) {\n      // const post: Post = {id: null, title: title, content: content};\n      // formData nos permite combinar valores de texto y blobs (valores de archivo)\n      const postData = new FormData();\n      postData.append('title', title);\n      postData.append('content', content);\n      postData.append('image', image, title);\n      this.http.post(BACKEND_URL, postData).subscribe(responseData => {\n        this.router.navigate(['/']);\n      });\n    }\n    updatePost(id, title, content, image) {\n      let postData;\n      if (typeof image === 'object') {\n        postData = new FormData();\n        postData.append(\"id\", id);\n        postData.append('title', title);\n        postData.append('content', content);\n        postData.append('image', image, title);\n      } else {\n        postData = {\n          id: id,\n          title: title,\n          content: content,\n          imagePath: image,\n          creator: null\n        };\n      }\n      this.http.put(BACKEND_URL + id, postData).subscribe(response => {\n        this.router.navigate(['/']);\n      });\n    }\n    deletePost(postId) {\n      return this.http.delete(BACKEND_URL + postId);\n    }\n  }\n  PostsService.ɵfac = function PostsService_Factory(t) {\n    return new (t || PostsService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n  };\n  PostsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PostsService,\n    factory: PostsService.ɵfac,\n    providedIn: 'root'\n  });\n  return PostsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}