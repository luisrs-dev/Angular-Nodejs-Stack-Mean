{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n    }\n    intercept(req, next) {\n      // Primero se obtiene el Token desde la solicitud\n      const authToken = this.authService.getToken();\n      // Lo siguiente es manipular la solicitud para mantener ese token\n      // Clonar la solicitud, por que si se añade directmente, se causaran efectos secundarios internamente\n      // Se clona para crear una copia de la solicitud y pasar la configuración al clon y editarlo\n      // Editar los headers (cabeceras) y agregar uno nuevo\n      // Headers originales y además agregar un extra\n      const authRequest = req.clone({\n        // El método set no anula los headers, sólo añade nuevos y establece valores\n        // Si existiera un header lo sobrescribe\n        headers: req.headers.set('Authorization', \"Bearer \" + authToken)\n      });\n      return next.handle(authRequest);\n    }\n  }\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}